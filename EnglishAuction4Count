// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

import "@openzeppelin/contracts/utils/math/SafeMath.sol";
import "@openzeppelin/contracts/token/ERC721/IERC721.sol";
import "@openzeppelin/contracts/security/ReentrancyGuard.sol";
import "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol";
import "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol";

contract EnglishAuction is IERC721Receiver, ReentrancyGuard {
    using SafeMath for uint256;
    using SafeERC20 for IERC20;

    struct Auction {
        uint256 start;
        uint256 end;
        uint256 currentHighestBid;
        uint256 minimumBid;
        address currentHighestBidder;
        bool ended;
        IERC721 nft;
        uint256 tokenId;
        bool hasFinalized;
    }
    mapping(uint256 => Auction) public auctions;
    mapping(uint256 => address payable) creators;  // Moved outside the struct

    address payable public immutable owner;
    address payable public immutable fundRecipient;
    uint256 public immutable royaltyPercentage;

    uint256 private constant PERCENTAGE_DIVISOR = 10000;

    event NewHighestBid(uint256 indexed auctionId, address indexed bidder, uint256 amount);
    event BidOutbid(uint256 indexed auctionId, address indexed outbidBidder, uint256 newHighestBid);
    event AuctionEnded(uint256 indexed auctionId, address indexed winner, uint256 amount);
    event AuctionFinalized(uint256 indexed auctionId, address indexed winner, uint256 amount);
    event NFTTransferred(uint256 indexed auctionId, address indexed from, address indexed to, uint256 tokenId);
    event AuctionReset(uint256 indexed auctionId, uint256 start, uint256 end, uint256 minimumBid);

    mapping(uint256 => address payable) fundRecipients;

    constructor (
        uint256 _royaltyPercentage,
        uint256[] memory _starts,
        uint256[] memory _ends,
        uint256[] memory _minimumBids,
        address[] memory _nftAddresses,
        uint256[] memory _tokenIds,
        address payable[] memory _creators,
        address payable[] memory _fundRecipients
    ) {
        require(_starts.length == _ends.length && _starts.length == _minimumBids.length && _starts.length == _nftAddresses.length && _starts.length == _tokenIds.length && _starts.length == _creators.length && _starts.length == _fundRecipients.length, "Array lengths must match");

        owner = payable(msg.sender);
        fundRecipient = _fundRecipients[0]; // Add this line to initialize the fundRecipient
        royaltyPercentage = _royaltyPercentage;

        for (uint256 i = 0; i < _starts.length; i++) {
            auctions[i] = Auction({
                start: _starts[i],
                end: _ends[i],
                currentHighestBid: 0,
                minimumBid: _minimumBids[i],
                currentHighestBidder: address(0),
                ended: false,
                nft: IERC721(_nftAddresses[i]),
                tokenId: _tokenIds[i],
                hasFinalized: false
            });
            creators[i] = _creators[i];
            // Store the fund recipient address in a separate mapping
            fundRecipients[_tokenIds[i]] = _fundRecipients[i];
        }
    }


    modifier onlyNotTransferred(uint256 _auctionId) {
        require(auctions[_auctionId].nft.ownerOf(auctions[_auctionId].tokenId) != address(this), "NFT already transferred");
        _;
    }

    function transferNFT(uint256 _auctionId) external onlyOwner onlyNotTransferred(_auctionId) {
        address from = auctions[_auctionId].nft.ownerOf(auctions[_auctionId].tokenId);
        auctions[_auctionId].nft.transferFrom(from, address(this), auctions[_auctionId].tokenId);
        emit NFTTransferred(_auctionId, from, address(this), auctions[_auctionId].tokenId);
    }

    modifier onlyOwner() {
        require(msg.sender == owner, "Caller is not the auction owner");
        _;
    }

    modifier auctionEnded(uint256 _auctionId) {
        require(block.timestamp >= auctions[_auctionId].end, "Auction is still ongoing");
        _;
    }

    modifier onlyBefore(uint256 _auctionId) {
        require(block.timestamp < auctions[_auctionId].end, "Operation not allowed after the specified time");
        _;
    }

    modifier onlyNotOwner() {
        require(msg.sender != owner, "Operation not allowed for the contract owner");
        _;
    }
    modifier onlyAuctionOwner(uint256 _auctionId) {
        require(msg.sender == owner || msg.sender == creators[_auctionId], "Caller is not the auction owner or creator");
        _;
}

    function placeBid(uint256 _auctionId) external payable nonReentrant onlyBefore(_auctionId) onlyNotOwner {
        Auction storage auction = auctions[_auctionId];
        require(msg.sender != address(0), "Bidder address must not be the zero address");
        require(msg.value >= auction.minimumBid, "Bid too low.");
        require(msg.value > auction.currentHighestBid, "Bid too low.");

        uint256 refundAmount = 0;
        if (auction.currentHighestBid != 0) {
            refundAmount = auction.currentHighestBid;
            (bool success, ) = payable(auction.currentHighestBidder).call{value: refundAmount}("");
            require(success, "Refund transfer failed");
        }

        emit BidOutbid(_auctionId, auction.currentHighestBidder, msg.value);
 
        auction.currentHighestBid = msg.value;
        auction.currentHighestBidder = msg.sender;

        emit NewHighestBid(_auctionId, msg.sender, msg.value);
    }

   function endAuction(uint256 _auctionId) external onlyOwner {
    Auction storage auction = auctions[_auctionId];
    require(!auction.ended, "Auction has already ended.");
    require(auction.nft.ownerOf(auction.tokenId) == address(this), "NFT not transferred to contract");
    require(block.timestamp >= auction.end, "Auction has not ended yet.");
    require(auction.currentHighestBid != 0, "No bids placed in the auction");

    auction.ended = true;

    emit AuctionEnded(_auctionId, auction.currentHighestBidder, auction.currentHighestBid);
}

    function onERC721Received(
        address,
        address,
        uint256,
        bytes memory
    ) 
    public pure override returns (bytes4) {
        return this.onERC721Received.selector;
    }

    function getCurrentHighestBid(uint256 _auctionId) public view returns (uint256) {
        return auctions[_auctionId].currentHighestBid;
    }

    function getCurrentHighestBidder(uint256 _auctionId) public view returns (address) {
        return auctions[_auctionId].currentHighestBidder;
    }

    function getAuctionEndTime(uint256 _auctionId) public view returns (uint256) {
        return auctions[_auctionId].end;
    }


    function finalize(uint256 _auctionId) public onlyOwner nonReentrant {
        Auction storage auction = auctions[_auctionId];
        require(auction.nft.ownerOf(auction.tokenId) == address(this), "Contract does not hold the NFT");
        require(!auction.hasFinalized, "Auction has already been finalized.");
        require(auction.ended, "Auction has not ended yet.");

        // Calculate the royalty amount
        uint256 royaltyAmount = auction.currentHighestBid.mul(royaltyPercentage).div(PERCENTAGE_DIVISOR);

        // Send the royalty amount to the creator
        (bool successRoyalty, ) = creators[_auctionId].call{value: royaltyAmount}("");
        require(successRoyalty, "Transfer to creator failed.");

        // Calculate the remaining total
        uint256 remainingTotal = auction.currentHighestBid - royaltyAmount;

        // Send remaining funds to owner
        (bool successRecipient, ) = fundRecipients[_auctionId].call{value: remainingTotal}("");
        require(successRecipient, "Transfer to owner failed.");

        // Set hasFinalized to true
        auction.hasFinalized = true;

        // Transfer the NFT to the winner
        auction.nft.safeTransferFrom(address(this), auction.currentHighestBidder, auction.tokenId);

        emit AuctionFinalized(_auctionId, auction.currentHighestBidder, auction.currentHighestBid);
    }

    function withdrawExcessFunds(uint256 _auctionId) external onlyAuctionOwner(_auctionId) {
        require(auctions[_auctionId].hasFinalized, "Auction has not been finalized yet.");
        uint256 remainingBalance = address(this).balance;
        uint256 excessFunds = remainingBalance.sub(auctions[_auctionId].currentHighestBid, "No excess funds to withdraw.");
        require(excessFunds > 0, "No excess funds to withdraw.");
        (bool success, ) = owner.call{value: excessFunds}("");
        require(success, "Withdraw failed.");
    }

    function resetAuction(uint256 _auctionId, uint256 _start, uint256 _end, uint256 _minimumBid) external onlyAuctionOwner(_auctionId) {
        Auction storage auction = auctions[_auctionId];
        require(auction.hasFinalized, "Auction has not been finalized yet.");
        require(auction.nft.ownerOf(auction.tokenId) == address(this), "NFT not returned to contract.");
        require(_end > _start, "End time must be after start time.");

        emit AuctionReset(_auctionId, _start, _end, _minimumBid);

        auction.start = _start;
        auction.end = _end;
        auction.currentHighestBid = 0;
        auction.minimumBid = _minimumBid;
        auction.currentHighestBidder = address(0);
        auction.ended = false;
        auction.hasFinalized = false;
    }
}
